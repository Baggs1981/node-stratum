'use strict';

require('colors');

var
  program = require('commander'),
  rpc = require('json-rpc2');

function base64(value){
  if (value) {
    return (new Buffer(value)).toString('base64');
  } else {
    return '';
  }
}

function blockLen(value){
  value = value.toString();

  if (value.length < 64) {
    for (var i = 64 - value.length; i > 0; i--) {
      value = '0' + value;
    }
  }

  if (/[^a-f0-9]/i.test(value)) {
    console.log('Invalid SHA256 block hash supplied'.red);
    return null;
  }

  return value;
}

program
  .option('--host [host]', 'Host where the stratum server is running', 'localhost')
  .option('--port [port]', 'The port the stratum server is running', parseInt, 8080)
  .option('--password <password>', 'The password set in the stratum server', base64)
  .option('--hash <hash>', 'The new block hash', blockLen)
  .parse(process.argv);

if (!program.host || !program.port || !program.password || !program.hash) {
  console.log('All options must be set'.yellow);
  program.help();
} else {
  var client = rpc.Client.create(
    program.port,
    program.host
  );

  var socket = client.connectSocket(function (err, conn){
    socket.removeAllListeners('end');

    conn.call('mining.update_block', [program.password, program.hash], function (err, result){
      if (err) {
        console.log('' + err + ''.red);
      } else {
        console.log(result);
      }
    });
  });

  socket.on('end', function(){
    console.log('Connection closed'.grey);
  });

  socket.on('error', function(){
    console.log('Failed to connect to host'.grey);
  });
}